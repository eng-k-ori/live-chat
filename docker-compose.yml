version: '3'
services:
  rails:
    # ./railsをビルドコンテキストに指定
    build:
      context: ./live-chat-rails
      dockerfile: Dockerfile
    # 1 コンテナ内で実行される、Railsのサーバーを起動するコマンドを指定
    command: bash -c "bundle exec rails s -b '0.0.0.0'"
    # ホストマシンの./railsディレクトリを、コンテナ内の/live-chat-railsディレクトリにマウント
    volumes:
      - ./live-chat-rails:/live-chat-rails
    # Railsサーバーのデフォルトポート3000を、ホストマシンのポート3000にマッピング
    ports:
      - 3000:3000
    tty: true
    stdin_open: true

# # Dockerが使用する永続的なストレージを定義する部分
# volumes:
#   # mysql_dataという名前でMySQLのDBのデータを永続化。
#   mysql_data:

# @          @@          @@          @@          @@          @@          @@          @@          @
# 1
# bash -c "bundle exec rails s -b '0.0.0.0'"
# bash -c
# -cは、後続の文字列をコマンドとして実行するオプション
# この方法を使う理由は、docker-compose内で複数のコマンドをbashで実行する必要があるため。bash -cを使うことで、
# Dockerコンテナ内で任意のコマンドを柔軟に実行できる。
# ------------------------------------------------------------------------------------------------
# bundle exec
# Gemfile.lockに書かれているバージョンのgemが動く
# ------------------------------------------------------------------------------------------------
# -b '0.0.0.0'
# -bオプションは、Railsサーバーがバインド（接続）するIPアドレスを指定するもの。
# '0.0.0.0'は、すべてのネットワークインターフェースでサーバーが接続を受け付けることを意味している。
# コンテナ内部のサーバーに外部（例えばホストマシン）からアクセスできるようにするため。デフォルトでは、Railsサーバーは
# localhostでのみリクエストを受け付けるが、0.0.0.0にバインドすることで、コンテナ外部からもアクセス可能になる。