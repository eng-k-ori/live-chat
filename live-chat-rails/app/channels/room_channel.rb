class RoomChannel < ApplicationCable::Channel
  # 1
  def subscribed
    # 2
    stream_from 'room_channel'
  end

  # コネクションが切断されると呼び出されるメソッド
  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  # 3
  def receive(data)
    user = User.find_by(email: data['email'])
    # このdataにmessageとemailが含まれています。
    if message = Message.create(content: data['message'], user_id: user.id)
      # 4
      ActionCable.server.broadcast 'room_channel', { message: data['message'], name: user.name, created_at: message.created_at }
    end
  end
end

=begin
@          @@          @@          @@          @@          @@          @@          @@          @
1
`subscribed`
クライアントが特定のチャンネルに接続（サブスクライブ）したときに自動的に呼び出されるメソッド。Action Cableでは、
クライアント（通常はブラウザ）がWebSocketを通じてサーバーとリアルタイムで通信するために、特定のチャンネルに「サブ
スクライブ」する必要がある。
------------------------------------------------------------------------------------------------
#### **呼び出されるタイミング**
ブラウザ側でクライアントが `RoomChannel` にサブスクライブしようとするリクエストを送ると、サーバー側でこのリクエス
トを受け取り、`subscribed` メソッドが呼び出される。このタイミングで、クライアントが特定のストリーム（データを受け
取るためのパイプライン）に接続する設定を行う。
------------------------------------------------------------------------------------------------
- **チャンネル**: 特定のトピックやルームに関連する通信の窓口。クライアントはこのチャンネルにサブスクライブすること
で、そのトピックに関連するデータを送受信する。
- **ストリーム**: チャンネルにサブスクライブしたクライアントが、サーバーから送信されるデータを受け取るための通路。
`subscribed` で設定される。
- **ブロードキャスト**: サーバーがストリームに対してデータを送信すること。ストリームにサブスクライブしている全ての
クライアントにデータが送られる。

################################################################################################
2
`stream_from`
クライアントが特定のストリーム（この場合'room_channel'）からデータを受け取るように設定するメソッド。このメソッド
を `subscribed` 内で呼び出すことで、サーバーが特定のストリームからデータをクライアントにリアルタイムで送信できる
ようになる。
`room_channel` というストリームに対してブロードキャストされたデータが、サブスクライブしたクライアントに送信される。
どのチャネルとコネクションを確立するかどうかを指定する。

################################################################################################
3
receive
Action Cableでクライアントから送信されるデータを受け取るためのメソッド。名前は任意ではなく、Action Cableが特別
に認識するメソッド名。クライアントがWebSocketを通じてサーバーにメッセージを送信すると、自動的に receive が呼び出
される。そのため、他の名前に変更すると、クライアントからのデータを受け取ることができなくなる。

################################################################################################
4
ActionCable.server.broadcast 'room_channel', { message: data['message'], name: user.name, created_at: message.created_at }
ActionCable.server
Action Cableのサーバーインスタンスを指すオブジェクト。Action Cableのサーバーに対する操作（ブロードキャストなど）
を行うためのメソッドが提供されている。
================================================================================================
`broadcast`
Action Cableのサーバーインスタンスに対して、特定のチャンネルにリアルタイムでデータを送信（ブロードキャスト）するた
めのメソッド。
このメソッドを使うことで、指定されたチャンネルにサブスクライブしている全てのクライアントに同時にデータを送れる。
具体的には、サーバー側で新しいデータが生成された際に、そのデータをリアルタイムでクライアントに反映させるための処理が
自動的に行われる。
------------------------------------------------------------------------------------------------
`broadcast` メソッドは、以下の2つの引数を取る：
- **チャンネル名**（第一引数）: データを送信する対象となるチャンネルの名前。
  - 例: `'room_channel'`
- **送信するデータ**（第二引数）: クライアントに送るデータの内容をハッシュ形式などで指定する。
  - 例: `{ message: 'Hello, world!', name: 'Alice', created_at: '2024-08-23T12:00:00Z' }`
------------------------------------------------------------------------------------------------
 **`broadcast` の使用ケース**
- **チャットアプリケーション**: 新しいメッセージが投稿されたときに、全ての参加者に対してそのメッセージをリアルタイ
ムで配信する。これにより、ユーザー同士の対話がスムーズに行われる。
- **通知システム**: あるイベントが発生した際に、登録ユーザー全員にリアルタイムで通知を送信する。例えば、新しいコメ
ントや「いいね」がついたときに通知を即時に送ることで、ユーザーエンゲージメントを高める。
- 例: `ActionCable.server.broadcast 'notifications_channel', { notification: 'You have a new message!' }`
- **オンラインゲーム**: ゲーム内での状態変化（例えば、プレイヤーが動いた、スコアが更新された）を全ての参加プレイヤ
ーにリアルタイムで共有することで、ゲームの進行をスムーズに保つ。
- 例: `ActionCable.server.broadcast 'game_channel', { action: 'move', player_id: 1, position: { x: 10, y: 20 } }`
=end